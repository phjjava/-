<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:mvc="http://www.springframework.org/schema/mvc"
		xmlns:p="http://www.springframework.org/schema/p"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xsi:schemaLocation="http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		">
	<!-- 使用dbcp连接池 -->
	<!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"> -->
	<!-- druid兼容dbcp只改数据源实现 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${jdbc.mysql.driver}" />
		<property name="url" value="${jdbc.mysql.url}" />
		<property name="username" value="${jdbc.mysql.username}" />
		<property name="password" value="${jdbc.mysql.password}" />
		<!-- maxActive: 最大连接数量 -->    
        <property name="maxActive" value="150"/>  
        <!-- minIdle: 最小空闲连接  -->   
        <property name="minIdle" value="5"/>  
        <!-- maxIdle: 最大空闲连接  -->   
        <property name="maxIdle" value="20"/>  
        <!-- initialSize: 初始化连接 -->    
        <property name="initialSize" value="30"/>  
        <!-- 连接被泄露时是否打印   -->
        <property name="logAbandoned" value="true"/>  
        <!-- removeAbandoned: 是否自动回收超时连接 -->    
        <property name="removeAbandoned"  value="true"/>  
        <!-- removeAbandonedTimeout: 超时时间(以秒数为单位) -->    
        <property name="removeAbandonedTimeout" value="300"/>  
        <!-- maxWait: 超时等待时间以毫秒为单位 1000等于60秒 -->  
        <property name="maxWait" value="1000"/>  
        <!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->  
        <property name="timeBetweenEvictionRunsMillis" value="10000"/>  
        <!--  在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->  
        <property name="numTestsPerEvictionRun" value="10"/>  
        <!-- 1000 * 60 * 30  连接在池中保持空闲而不被空闲连接回收器线程 -->  
        <property name="minEvictableIdleTimeMillis" value="10000"/>
        <property name="testOnBorrow">  
	        <value>true</value>  
	    </property>
        <property name="validationQuery">  
	        <value>SELECT 1 FROM DUAL</value>  
	    </property> 
	    <!-- 配置监控统计拦截的filters -->
	    <property name="filters" value="mergeStat" /> 
	</bean>
	
	<!-- Spring Session共享 -->
    <bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration"/>
    <bean class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.ip}"/>
        <property name="password" value="${redis.password}"/>
        <property name="port" value="${redis.port}"/>
        
    </bean>
	
	<!-- 数据源配置, 使用alibaba.druid数据库连接池 -->
	
<!-- 	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass
	    <property name="driverClassName" value="${jdbc.mysql.driver}" />
	    
		基本属性 url、user、password
		<property name="url" value="${jdbc.mysql.url}" />
		<property name="username" value="${jdbc.mysql.username}" />
		<property name="password" value="${jdbc.mysql.password}" />
		
		配置初始化大小、最小、最大
		<property name="initialSize" value="30" />
		<property name="minIdle" value="5" /> 
		<property name="maxActive" value="150" />
		
		配置获取连接等待超时的时间
		<property name="maxWait" value="60000" />
		
		配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		
		配置一个连接在池中最小生存的时间，单位是毫秒
		<property name="minEvictableIdleTimeMillis" value="300000" />
		
		<property name="validationQuery" value="${jdbc.testSql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		
		打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		
		配置监控统计拦截的filters
	    <property name="filters" value="stat" /> 
	</bean> -->
	
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlServerSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:mybatis/*.xml" />
		<property name="typeAliasesPackage" value="com.jp.entity"/>
		<property name="plugins">
			<array>
				<!-- 分页插件 -->
				<bean class="com.github.pagehelper.PageInterceptor">
					<property name="properties">
						<value>
							<!-- 设置为true时，使用RowBounds分页会进行count查询 -->
							rowBoundsWithCount=true
						</value>
					</property>
				</bean>
				<!-- 性能拦截器，用于输出每条 SQL 语句及其执行时间，会影响一定性能，正式环境要关闭 -->
				<!-- <bean class="com.yupont.core.mvc.mybatis.PerformanceInterceptor">
				</bean> -->
			</array>
		</property>
	</bean>
	<!-- 配置扫描器，Dao层可以只声明接口，不写实现类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描com.ets.blog.dao这个包以及它的子包下的所有映射接口类 -->
        <property name="basePackage" value="com.jp.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlServerSessionFactory"/>
    </bean>
    
    <!-- 事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	 <!-- 只对业务逻辑接口层实时事务管理 -->
    <aop:config expose-proxy="true">
        <aop:pointcut id="txPointcut" expression="execution(* com.jp.service..*.*(..))" />
       <!-- Advisor定义，切入点和通知分别为txPointcut、txAdvice -->
        <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
    </aop:config>

    <!-- 配置处理事务的通知，对get/load/search/find开头的方法(查询)要求只读事务，对其它方法要求添加事务，异常返回Exception上一层 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="detail*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="load*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="search*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="find*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="*" propagation="REQUIRED" rollback-for="Exception" />
        </tx:attributes>
    </tx:advice>
    
</beans>
