<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jp.dao.UsermatesDao" >
  <resultMap id="BaseResultMap" type="com.jp.entity.Usermates" >
    <id column="userid" property="userid" jdbcType="VARCHAR" />
    <id column="mateid" property="mateid" jdbcType="VARCHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="sex" property="sex" jdbcType="INTEGER" />
    <result column="nation" property="nation" jdbcType="VARCHAR" />
    <result column="birthday" property="birthday" jdbcType="TIMESTAMP" />
    <result column="birthplace" property="birthplace" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.jp.entity.Usermates" extends="BaseResultMap" >
    <result column="remark" property="remark" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    <if test="fields == null" >
      userid, mateid, name, sex, nation, birthday, birthplace
    </if>
    <if test="fields != null" >
      ${fields}
    </if>
  </sql>
  <sql id="Blob_Column_List" >
    remark
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.jp.entity.UsermatesQuery" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from jp_usermates
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.jp.entity.UsermatesQuery" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from jp_usermates
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="startRow != null" >
      limit #{startRow} , #{pageSize}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="com.jp.entity.UsermatesKey" >
    select 
    userid,mateid,name,sex,nation,birthday,birthplace,remark
    ,
    <include refid="Blob_Column_List" />
    from jp_usermates
    where userid = #{userid,jdbcType=VARCHAR}
      and mateid = #{mateid,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.jp.entity.UsermatesKey" >
    delete from jp_usermates
    where userid = #{userid,jdbcType=VARCHAR}
      and mateid = #{mateid,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.jp.entity.UsermatesQuery" >
    delete from jp_usermates
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.jp.entity.Usermates" >
    insert into jp_usermates (userid, mateid, name, 
      sex, nation, birthday, 
      birthplace, remark)
    values (#{userid,jdbcType=VARCHAR}, #{mateid,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{sex,jdbcType=INTEGER}, #{nation,jdbcType=VARCHAR}, #{birthday,jdbcType=TIMESTAMP}, 
      #{birthplace,jdbcType=VARCHAR}, #{remark,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.jp.entity.Usermates" >
    insert into jp_usermates
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userid != null" >
        userid,
      </if>
      <if test="mateid != null" >
        mateid,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="sex != null" >
        sex,
      </if>
      <if test="nation != null" >
        nation,
      </if>
      <if test="birthday != null" >
        birthday,
      </if>
      <if test="birthplace != null" >
        birthplace,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="matetype != null" >
        matetype,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userid != null" >
        #{userid,jdbcType=VARCHAR},
      </if>
      <if test="mateid != null" >
        #{mateid,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        #{sex,jdbcType=INTEGER},
      </if>
      <if test="nation != null" >
        #{nation,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null" >
        #{birthday,jdbcType=TIMESTAMP},
      </if>
      <if test="birthplace != null" >
        #{birthplace,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=LONGVARCHAR},
      </if>
      <if test="matetype != null" >
        #{matetype,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.jp.entity.UsermatesQuery" resultType="java.lang.Integer" >
    select count(*) from jp_usermates
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update jp_usermates
    <set >
      <if test="record.userid != null" >
        userid = #{record.userid,jdbcType=VARCHAR},
      </if>
      <if test="record.mateid != null" >
        mateid = #{record.mateid,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null" >
        sex = #{record.sex,jdbcType=INTEGER},
      </if>
      <if test="record.nation != null" >
        nation = #{record.nation,jdbcType=VARCHAR},
      </if>
      <if test="record.birthday != null" >
        birthday = #{record.birthday,jdbcType=TIMESTAMP},
      </if>
      <if test="record.birthplace != null" >
        birthplace = #{record.birthplace,jdbcType=VARCHAR},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update jp_usermates
    set userid = #{record.userid,jdbcType=VARCHAR},
      mateid = #{record.mateid,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=INTEGER},
      nation = #{record.nation,jdbcType=VARCHAR},
      birthday = #{record.birthday,jdbcType=TIMESTAMP},
      birthplace = #{record.birthplace,jdbcType=VARCHAR},
      remark = #{record.remark,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update jp_usermates
    set userid = #{record.userid,jdbcType=VARCHAR},
      mateid = #{record.mateid,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=INTEGER},
      nation = #{record.nation,jdbcType=VARCHAR},
      birthday = #{record.birthday,jdbcType=TIMESTAMP},
      birthplace = #{record.birthplace,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.jp.entity.Usermates" >
    update jp_usermates
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        sex = #{sex,jdbcType=INTEGER},
      </if>
      <if test="nation != null" >
        nation = #{nation,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null" >
        birthday = #{birthday,jdbcType=TIMESTAMP},
      </if>
      <if test="birthplace != null" >
        birthplace = #{birthplace,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where userid = #{userid,jdbcType=VARCHAR}
      and mateid = #{mateid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.jp.entity.Usermates" >
    update jp_usermates
    set name = #{name,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=INTEGER},
      nation = #{nation,jdbcType=VARCHAR},
      birthday = #{birthday,jdbcType=TIMESTAMP},
      birthplace = #{birthplace,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=LONGVARCHAR}
    where userid = #{userid,jdbcType=VARCHAR}
      and mateid = #{mateid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jp.entity.Usermates" >
    update jp_usermates
    set name = #{name,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=INTEGER},
      nation = #{nation,jdbcType=VARCHAR},
      birthday = #{birthday,jdbcType=TIMESTAMP},
      birthplace = #{birthplace,jdbcType=VARCHAR}
    where userid = #{userid,jdbcType=VARCHAR}
      and mateid = #{mateid,jdbcType=VARCHAR}
  </update>
  <insert id="insertMatesList">
	     insert into jp_usermates (userid,mateid,name,sex,nation,birthday,birthplace,remark)
	     values
	     <foreach collection="list" item="item" index="index" separator=",">
				(#{item.userid},#{item.mateid},#{item.name},#{item.sex},
				#{item.nation},#{item.birthday},#{item.birthplace},#{item.remark}
				)
		</foreach>
  </insert>
  <!-- 根据用户id查询对应的所有配偶id信息,判断有无重复  -->
   <select id="selectmateIdByUserId" resultType="com.jp.entity.Usermates"  >
    select 
    *
    from jp_usermates
    where userid = #{userId,jdbcType=VARCHAR}
  </select>
</mapper>